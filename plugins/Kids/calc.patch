---
 plugins/Kids/calculator.py |   96 +++++++++++++++++++++++++++++++++++++++----
 plugins/Kids/plugin.py     |    9 +++-
 2 files changed, 94 insertions(+), 11 deletions(-)

diff --git a/plugins/Kids/calculator.py b/plugins/Kids/calculator.py
index b6a04f6..de67bb9 100644
--- a/plugins/Kids/calculator.py
+++ b/plugins/Kids/calculator.py
@@ -17,7 +17,7 @@ exprStack = []
 def pushFirst( strg, loc, toks ):
     exprStack.append( toks[0] )
 def pushUMinus( strg, loc, toks ):
-    if toks and toks[0]=='-': 
+    if toks and toks[0]=='-':
         exprStack.append( 'unary -' )
         #~ exprStack.append( '-1' )
         #~ exprStack.append( '*' )
@@ -38,11 +38,11 @@ def BNF():
     if not bnf:
         point = Literal( "." )
         e     = CaselessLiteral( "E" )
-        fnumber = Combine( Optional(Word( "+-"+nums, nums )) + 
+        fnumber = Combine( Word( "+-"+nums, nums ) +
                            Optional( point + Optional( Word( nums ) ) ) +
                            Optional( e + Word( "+-"+nums, nums ) ) )
         ident = Word(alphas, alphas+nums+"_$")
-     
+
         plus  = Literal( "+" )
         minus = Literal( "-" )
         mult  = Literal( "*" )
@@ -53,15 +53,15 @@ def BNF():
         multop = mult | div
         expop = Literal( "^" )
         pi    = CaselessLiteral( "PI" )
-        
+
         expr = Forward()
-        atom = (Optional("-") + ( pi | e | fnumber | ident + lpar + expr + rpar ).setParseAction( pushFirst ) | ( lpar + expr.suppress() + rpar )).setParseAction(pushUMinus) 
-        
+        atom = (Optional("-") + ( pi | e | fnumber | ident + lpar + expr + rpar ).setParseAction( pushFirst ) | ( lpar + expr.suppress() + rpar )).setParseAction(pushUMinus)
+
         # by defining exponentiation as "atom [ ^ factor ]..." instead of "atom [ ^ atom ]...", we get right-to-left exponents, instead of left-to-righ
         # that is, 2^3^2 = 2^(3^2), not (2^3)^2.
         factor = Forward()
         factor << atom + ZeroOrMore( ( expop + factor ).setParseAction( pushFirst ) )
-        
+
         term = factor + ZeroOrMore( ( multop + factor ).setParseAction( pushFirst ) )
         expr << term + ZeroOrMore( ( addop + term ).setParseAction( pushFirst ) )
         bnf = expr
@@ -101,9 +101,87 @@ def evaluateStack( s ):
         return float( op )
 
 def parse_and_calc( s ):
+    """
+    >>> parse_and_calc("(405-396)*3")
+    27.0
+    """
     global exprStack
     exprStack = []
     results = BNF().parseString( s )
-    val = evaluateStack( exprStack[:] )
-    return "%s = %s"%(s.strip().replace(' ',''), val.__str__(), ) # results)
+    return evaluateStack( exprStack[:] )
+
+if __name__ == "__main__":
+
+    def test( s, expVal ):
+        global exprStack
+        exprStack = []
+        results = BNF().parseString( s )
+        val = evaluateStack( exprStack[:] )
+        if val == expVal:
+            print s, "=", val, results, "=>", exprStack
+        else:
+            print s+"!!!", val, "!=", expVal, results, "=>", exprStack
+
+    test( "9", 9 )
+    test( "-9", -9 )
+    test( "--9", 9 )
+    test( "-E", -math.e )
+    test( "9 + 3 + 6", 9 + 3 + 6 )
+    test( "9 + 3 / 11", 9 + 3.0 / 11 )
+    test( "(9 + 3)", (9 + 3) )
+    test( "(9+3) / 11", (9+3.0) / 11 )
+    test( "9 - 12 - 6", 9 - 12 - 6 )
+    test( "9 - (12 - 6)", 9 - (12 - 6) )
+    test( "2*3.14159", 2*3.14159 )
+    test( "3.1415926535*3.1415926535 / 10", 3.1415926535*3.1415926535 / 10 )
+    test( "PI * PI / 10", math.pi * math.pi / 10 )
+    test( "PI*PI/10", math.pi*math.pi/10 )
+    test( "PI^2", math.pi**2 )
+    test( "round(PI^2)", round(math.pi**2) )
+    test( "6.02E23 * 8.048", 6.02E23 * 8.048 )
+    test( "e / 3", math.e / 3 )
+    test( "sin(PI/2)", math.sin(math.pi/2) )
+    test( "trunc(E)", int(math.e) )
+    test( "trunc(-E)", int(-math.e) )
+    test( "round(E)", round(math.e) )
+    test( "round(-E)", round(-math.e) )
+    test( "E^PI", math.e**math.pi )
+    test( "2^3^2", 2**3**2 )
+    test( "2^3+2", 2**3+2 )
+    test( "2^9", 2**9 )
+    test( "sgn(-2)", -1 )
+    test( "sgn(0)", 0 )
+    test( "sgn(0.1)", 1 )
+    import doctest
+    doctest.testmod()
+
+
+"""
+Test output:
+>pythonw -u fourFn.py
+9 = 9.0 ['9'] => ['9']
+9 + 3 + 6 = 18.0 ['9', '+', '3', '+', '6'] => ['9', '3', '+', '6', '+']
+9 + 3 / 11 = 9.27272727273 ['9', '+', '3', '/', '11'] => ['9', '3', '11', '/', '+']
+(9 + 3) = 12.0 [] => ['9', '3', '+']
+(9+3) / 11 = 1.09090909091 ['/', '11'] => ['9', '3', '+', '11', '/']
+9 - 12 - 6 = -9.0 ['9', '-', '12', '-', '6'] => ['9', '12', '-', '6', '-']
+9 - (12 - 6) = 3.0 ['9', '-'] => ['9', '12', '6', '-', '-']
+2*3.14159 = 6.28318 ['2', '*', '3.14159'] => ['2', '3.14159', '*']
+3.1415926535*3.1415926535 / 10 = 0.986960440053 ['3.1415926535', '*', '3.1415926535', '/', '10'] => ['3.1415926535', '3.1415926535', '*', '10', '/']
+PI * PI / 10 = 0.986960440109 ['PI', '*', 'PI', '/', '10'] => ['PI', 'PI', '*', '10', '/']
+PI*PI/10 = 0.986960440109 ['PI', '*', 'PI', '/', '10'] => ['PI', 'PI', '*', '10', '/']
+PI^2 = 9.86960440109 ['PI', '^', '2'] => ['PI', '2', '^']
+6.02E23 * 8.048 = 4.844896e+024 ['6.02E23', '*', '8.048'] => ['6.02E23', '8.048', '*']
+e / 3 = 0.90609394282 ['E', '/', '3'] => ['E', '3', '/']
+sin(PI/2) = 1.0 ['sin', 'PI', '/', '2'] => ['PI', '2', '/', 'sin']
+trunc(E) = 2 ['trunc', 'E'] => ['E', 'trunc']
+E^PI = 23.1406926328 ['E', '^', 'PI'] => ['E', 'PI', '^']
+2^3^2 = 512.0 ['2', '^', '3', '^', '2'] => ['2', '3', '2', '^', '^']
+2^3+2 = 10.0 ['2', '^', '3', '+', '2'] => ['2', '3', '^', '2', '+']
+2^9 = 512.0 ['2', '^', '9'] => ['2', '9', '^']
+sgn(-2) = -1 ['sgn', '-2'] => ['-2', 'sgn']
+sgn(0) = 0 ['sgn', '0'] => ['0', 'sgn']
+sgn(0.1) = 1 ['sgn', '0.1'] => ['0.1', 'sgn']
+>Exit code: 0
+"""
 
diff --git a/plugins/Kids/plugin.py b/plugins/Kids/plugin.py
index a1bddd9..e991b43 100644
--- a/plugins/Kids/plugin.py
+++ b/plugins/Kids/plugin.py
@@ -55,8 +55,13 @@ class Kids(callbacks.Plugin):
         irc.reply(word + ": " + "; ".join(retdef))
 
     def calc(self,irc,msg,args):
-        """2+2=4"""
-        result = calculator.parse_and_calc(" ".join(args))
+        """
+        >>>(405 - 396) * 3
+        (405-396)*3 = 27.0
+        """
+        s = " ".join(args).strip().replace(' ','')
+        val = calculator.parse_and_calc(s)
+        result = "%s = %s"%(s, val.__str__(), )
         irc.reply(result)
 
     def cve(self,irc,msg,args):
-- 
1.6.0.2

